{"remainingRequest":"E:\\qingyunjiudian\\manager\\node_modules\\babel-loader\\lib\\index.js!E:\\qingyunjiudian\\manager\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\qingyunjiudian\\manager\\src\\utils\\axios.js","dependencies":[{"path":"E:\\qingyunjiudian\\manager\\src\\utils\\axios.js","mtime":1553909733572},{"path":"E:\\qingyunjiudian\\manager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558690126701},{"path":"E:\\qingyunjiudian\\manager\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"E:\\qingyunjiudian\\manager\\node_modules\\eslint-loader\\index.js","mtime":1519638534000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport axios from \"axios\";\nimport { Message } from \"element-ui\";\nimport store from \"../store/index\";\nimport { BASE_URL } from \"../config/app\"; //import router from \"../router/index\";\n// 创建axios实例\n\nvar service = axios.create({\n  baseURL: BASE_URL,\n  // api的base_url\n  timeout: 60000 // 请求超时时间(60s)\n\n}); // request拦截器\n\nservice.interceptors.request.use(function (config) {\n  // Do something before request is sent\n  if (store.getters.adminId && store.getters.token) {\n    config.headers[\"X-Adminid\"] = store.getters.adminId;\n    config.headers[\"X-Token\"] = store.getters.token;\n  }\n\n  return config;\n}, function (error) {\n  // Do something with request error\n  Promise.reject(error);\n}); // respone拦截器\n\nservice.interceptors.response.use(function (response) {\n  var data = response.data;\n\n  if (data.code) {\n    if (data.code === 2) {\n      store.dispatch(\"loginOut\").then(function () {\n        Message.error(\"登录信息过期,请重新登录\"); // router.push({\n        //     path: \"/login\"\n        //     // query: { redirect: router.currentRoute.fullPath } // 从哪个页面跳转过来\n        // });\n\n        window.location.replace(\"/login\");\n      });\n    }\n  }\n\n  return data;\n}, function (error) {\n  var msg = error.message;\n\n  if (msg === \"Network Error\") {\n    msg = \"网络异常 请检查网络设置\";\n  }\n\n  Message({\n    message: msg,\n    type: \"error\",\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;",{"version":3,"sources":["src\\utils\\axios.js"],"names":["axios","Message","store","BASE_URL","service","create","baseURL","timeout","interceptors","request","use","getters","adminId","token","config","headers","Promise","reject","error","response","data","code","dispatch","then","window","location","replace","msg","message","type","duration"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,QAAT,QAAyB,eAAzB,C,CACA;AAEA;;AACA,IAAMC,UAAUJ,MAAMK,MAAN,CAAa;AACzBC,WAASH,QADgB;AACN;AACnBI,WAAS,KAFgB,CAEV;;AAFU,CAAb,CAAhB,C,CAKA;;AACAH,QAAQI,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CACI,kBAAU;AACN;AACA,MAAIR,MAAMS,OAAN,CAAcC,OAAd,IAAyBV,MAAMS,OAAN,CAAcE,KAA3C,EAAkD;AAC9CC,WAAOC,OAAP,CAAe,WAAf,IAA8Bb,MAAMS,OAAN,CAAcC,OAA5C;AACAE,WAAOC,OAAP,CAAe,SAAf,IAA4Bb,MAAMS,OAAN,CAAcE,KAA1C;AACH;;AACD,SAAOC,MAAP;AACH,CARL,EASI,iBAAS;AACL;AACAE,UAAQC,MAAR,CAAeC,KAAf;AACH,CAZL,E,CAeA;;AACAd,QAAQI,YAAR,CAAqBW,QAArB,CAA8BT,GAA9B,CACI,oBAAY;AACR,MAAMU,OAAOD,SAASC,IAAtB;;AACA,MAAIA,KAAKC,IAAT,EAAe;AACX,QAAID,KAAKC,IAAL,KAAc,CAAlB,EAAqB;AACjBnB,YAAMoB,QAAN,CAAe,UAAf,EAA2BC,IAA3B,CAAgC,YAAM;AAClCtB,gBAAQiB,KAAR,CAAc,cAAd,EADkC,CAElC;AACA;AACA;AACA;;AACAM,eAAOC,QAAP,CAAgBC,OAAhB,CAAwB,QAAxB;AACH,OAPD;AAQH;AACJ;;AACD,SAAON,IAAP;AACH,CAhBL,EAiBI,iBAAS;AACL,MAAIO,MAAMT,MAAMU,OAAhB;;AACA,MAAID,QAAQ,eAAZ,EAA6B;AACzBA,UAAM,cAAN;AACH;;AACD1B,UAAQ;AACJ2B,aAASD,GADL;AAEJE,UAAM,OAFF;AAGJC,cAAU,IAAI;AAHV,GAAR;AAKA,SAAOd,QAAQC,MAAR,CAAeC,KAAf,CAAP;AACH,CA5BL;AA+BA,eAAed,OAAf","sourceRoot":"E:\\qingyunjiudian\\manager","sourcesContent":["import axios from \"axios\";\r\nimport { Message } from \"element-ui\";\r\nimport store from \"../store/index\";\r\nimport { BASE_URL } from \"../config/app\";\r\n//import router from \"../router/index\";\r\n\r\n// 创建axios实例\r\nconst service = axios.create({\r\n    baseURL: BASE_URL, // api的base_url\r\n    timeout: 60000 // 请求超时时间(60s)\r\n});\r\n\r\n// request拦截器\r\nservice.interceptors.request.use(\r\n    config => {\r\n        // Do something before request is sent\r\n        if (store.getters.adminId && store.getters.token) {\r\n            config.headers[\"X-Adminid\"] = store.getters.adminId;\r\n            config.headers[\"X-Token\"] = store.getters.token;\r\n        }\r\n        return config;\r\n    },\r\n    error => {\r\n        // Do something with request error\r\n        Promise.reject(error);\r\n    }\r\n);\r\n\r\n// respone拦截器\r\nservice.interceptors.response.use(\r\n    response => {\r\n        const data = response.data;\r\n        if (data.code) {\r\n            if (data.code === 2) {\r\n                store.dispatch(\"loginOut\").then(() => {\r\n                    Message.error(\"登录信息过期,请重新登录\");\r\n                    // router.push({\r\n                    //     path: \"/login\"\r\n                    //     // query: { redirect: router.currentRoute.fullPath } // 从哪个页面跳转过来\r\n                    // });\r\n                    window.location.replace(\"/login\");\r\n                });\r\n            }\r\n        }\r\n        return data;\r\n    },\r\n    error => {\r\n        let msg = error.message;\r\n        if (msg === \"Network Error\") {\r\n            msg = \"网络异常 请检查网络设置\";\r\n        }\r\n        Message({\r\n            message: msg,\r\n            type: \"error\",\r\n            duration: 5 * 1000\r\n        });\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default service;\r\n"]}]}