{"remainingRequest":"E:\\mijia\\manager\\node_modules\\babel-loader\\lib\\index.js!E:\\mijia\\manager\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\mijia\\manager\\src\\utils\\directives.js","dependencies":[{"path":"E:\\mijia\\manager\\src\\utils\\directives.js","mtime":1553328249066},{"path":"E:\\mijia\\manager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558690126701},{"path":"E:\\mijia\\manager\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"E:\\mijia\\manager\\node_modules\\eslint-loader\\index.js","mtime":1519638534000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n\n/* eslint-disable */\nimport Vue from 'vue';\n/*\r\n *  定义公共js里，在入口文件main.js中import；\r\n *  给elementUI的dialog上加上 v-dialogDrag 指令就可以实现弹窗的全屏和拉伸了。\r\n */\n// v-dialogDrag: 弹窗拖拽+水平方向伸缩\n\nVue.directive('dialogDrag', {\n  bind: function bind(el, binding, vnode, oldVnode) {\n    //弹框可拉伸最小宽高\n    var minWidth = 400;\n    var minHeight = 300; //初始非全屏\n\n    var isFullScreen = false; //当前宽高\n\n    var nowWidth = 0;\n    var nowHight = 0; //当前顶部高度\n\n    var nowMarginTop = 0; //获取弹框头部（这部分可双击全屏）\n\n    var dialogHeaderEl = el.querySelector('.el-dialog__header'); //弹窗\n\n    var dragDom = el.querySelector('.el-dialog'); //给弹窗加上overflow auto；不然缩小时框内的标签可能超出dialog；\n\n    dragDom.style.overflow = \"auto\"; //清除选择头部文字效果\n\n    dialogHeaderEl.onselectstart = new Function(\"return false\"); //头部加上可拖动cursor\n\n    dialogHeaderEl.style.cursor = 'move'; // 获取原有属性 ie dom元素.currentStyle 火狐谷歌 window.getComputedStyle(dom元素, null);\n\n    var sty = dragDom.currentStyle || window.getComputedStyle(dragDom, null);\n\n    var moveDown = function moveDown(e) {\n      // 鼠标按下，计算当前元素距离可视区的距离\n      var disX = e.clientX - dialogHeaderEl.offsetLeft;\n      var disY = e.clientY - dialogHeaderEl.offsetTop; // 获取到的值带px 正则匹配替换\n\n      var styL, styT; // 注意在ie中 第一次获取到的值为组件自带50% 移动之后赋值为px\n\n      if (sty.left.includes('%')) {\n        styL = +document.body.clientWidth * (+sty.left.replace(/\\%/g, '') / 100);\n        styT = +document.body.clientHeight * (+sty.top.replace(/\\%/g, '') / 100);\n      } else {\n        styL = +sty.left.replace(/\\px/g, '');\n        styT = +sty.top.replace(/\\px/g, '');\n      }\n\n      ;\n\n      document.onmousemove = function (e) {\n        // 通过事件委托，计算移动的距离 \n        var l = e.clientX - disX;\n        var t = e.clientY - disY; // 移动当前元素  \n\n        dragDom.style.left = \"\".concat(l + styL, \"px\");\n        dragDom.style.top = \"\".concat(t + styT, \"px\"); //将此时的位置传出去\n        //binding.value({x:e.pageX,y:e.pageY})\n      };\n\n      document.onmouseup = function (e) {\n        document.onmousemove = null;\n        document.onmouseup = null;\n      };\n    };\n\n    dialogHeaderEl.onmousedown = moveDown; //双击头部效果\n\n    dialogHeaderEl.ondblclick = function (e) {\n      if (isFullScreen == false) {\n        nowHight = dragDom.clientHeight;\n        nowWidth = dragDom.clientWidth;\n        nowMarginTop = dragDom.style.marginTop;\n        dragDom.style.left = 0;\n        dragDom.style.top = 0;\n        dragDom.style.height = \"100VH\";\n        dragDom.style.width = \"100VW\";\n        dragDom.style.marginTop = 0;\n        isFullScreen = true;\n        dialogHeaderEl.style.cursor = 'initial';\n        dialogHeaderEl.onmousedown = null;\n      } else {\n        dragDom.style.height = \"auto\";\n        dragDom.style.width = nowWidth + 'px';\n        dragDom.style.marginTop = nowMarginTop;\n        isFullScreen = false;\n        dialogHeaderEl.style.cursor = 'move';\n        dialogHeaderEl.onmousedown = moveDown;\n      }\n    }; //拉伸\n\n\n    var resizeEl = document.createElement(\"div\");\n    dragDom.appendChild(resizeEl); //在弹窗右下角加上一个10-10px的控制块\n\n    resizeEl.style.cursor = 'se-resize';\n    resizeEl.style.position = 'absolute';\n    resizeEl.style.height = '10px';\n    resizeEl.style.width = '10px';\n    resizeEl.style.right = '0px';\n    resizeEl.style.bottom = '0px'; //鼠标拉伸弹窗\n\n    resizeEl.onmousedown = function (e) {\n      // 记录初始x位置\n      var clientX = e.clientX; // 鼠标按下，计算当前元素距离可视区的距离\n\n      var disX = e.clientX - resizeEl.offsetLeft;\n      var disY = e.clientY - resizeEl.offsetTop;\n\n      document.onmousemove = function (e) {\n        e.preventDefault(); // 移动时禁用默认事件\n        // 通过事件委托，计算移动的距离 \n\n        var x = e.clientX - disX + (e.clientX - clientX); //这里 由于elementUI的dialog控制居中的，所以水平拉伸效果是双倍\n\n        var y = e.clientY - disY; //比较是否小于最小宽高\n\n        dragDom.style.width = x > minWidth ? \"\".concat(x, \"px\") : minWidth + 'px';\n        dragDom.style.height = y > minHeight ? \"\".concat(y, \"px\") : minHeight + 'px';\n      }; //拉伸结束\n\n\n      document.onmouseup = function (e) {\n        document.onmousemove = null;\n        document.onmouseup = null;\n      };\n    };\n  }\n});\n/**\r\n *  注意：如果是el-dialog弹出的表单el-form，最好不要把提交按钮当做el-form-item（elementUI文档是这么用的），放在el-dialog里。\r\n *  不然按钮会同el-dialog中标签一样被overflow；\r\n*/",{"version":3,"sources":["src\\utils\\directives.js"],"names":["Vue","directive","bind","el","binding","vnode","oldVnode","minWidth","minHeight","isFullScreen","nowWidth","nowHight","nowMarginTop","dialogHeaderEl","querySelector","dragDom","style","overflow","onselectstart","Function","cursor","sty","currentStyle","window","getComputedStyle","moveDown","e","disX","clientX","offsetLeft","disY","clientY","offsetTop","styL","styT","left","includes","document","body","clientWidth","replace","clientHeight","top","onmousemove","l","t","onmouseup","onmousedown","ondblclick","marginTop","height","width","resizeEl","createElement","appendChild","position","right","bottom","preventDefault","x","y"],"mappings":"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","sourceRoot":"E:\\mijia\\manager","sourcesContent":["/* eslint-disable */\r\nimport Vue from 'vue';\r\n/*\r\n *  定义公共js里，在入口文件main.js中import；\r\n *  给elementUI的dialog上加上 v-dialogDrag 指令就可以实现弹窗的全屏和拉伸了。\r\n */\r\n// v-dialogDrag: 弹窗拖拽+水平方向伸缩\r\nVue.directive('dialogDrag', {\r\n  bind(el, binding, vnode, oldVnode) {\r\n    //弹框可拉伸最小宽高\r\n    let minWidth = 400;\r\n    let minHeight = 300;\r\n    //初始非全屏\r\n    let isFullScreen = false;\r\n    //当前宽高\r\n    let nowWidth = 0;\r\n    let nowHight = 0;\r\n    //当前顶部高度\r\n    let nowMarginTop = 0;\r\n    //获取弹框头部（这部分可双击全屏）\r\n    const dialogHeaderEl = el.querySelector('.el-dialog__header');\r\n    //弹窗\r\n    const dragDom = el.querySelector('.el-dialog');\r\n    //给弹窗加上overflow auto；不然缩小时框内的标签可能超出dialog；\r\n    dragDom.style.overflow = \"auto\";\r\n    //清除选择头部文字效果\r\n    dialogHeaderEl.onselectstart = new Function(\"return false\");  \r\n    //头部加上可拖动cursor\r\n    dialogHeaderEl.style.cursor = 'move';\r\n\r\n    // 获取原有属性 ie dom元素.currentStyle 火狐谷歌 window.getComputedStyle(dom元素, null);\r\n    const sty = dragDom.currentStyle || window.getComputedStyle(dragDom, null);\r\n\r\n    let moveDown = (e) => {\r\n      // 鼠标按下，计算当前元素距离可视区的距离\r\n      const disX = e.clientX - dialogHeaderEl.offsetLeft;\r\n      const disY = e.clientY - dialogHeaderEl.offsetTop;\r\n\r\n      // 获取到的值带px 正则匹配替换\r\n      let styL, styT;\r\n\r\n      // 注意在ie中 第一次获取到的值为组件自带50% 移动之后赋值为px\r\n      if (sty.left.includes('%')) {\r\n        styL = +document.body.clientWidth * (+sty.left.replace(/\\%/g, '') / 100);\r\n        styT = +document.body.clientHeight * (+sty.top.replace(/\\%/g, '') / 100);\r\n      } else {\r\n        styL = +sty.left.replace(/\\px/g, '');\r\n        styT = +sty.top.replace(/\\px/g, '');\r\n      };\r\n\r\n      document.onmousemove = function (e) {\r\n        // 通过事件委托，计算移动的距离 \r\n        const l = e.clientX - disX;\r\n        const t = e.clientY - disY;\r\n\r\n        // 移动当前元素  \r\n        dragDom.style.left = `${l + styL}px`;\r\n        dragDom.style.top = `${t + styT}px`;\r\n\r\n        //将此时的位置传出去\r\n        //binding.value({x:e.pageX,y:e.pageY})\r\n      };\r\n\r\n      document.onmouseup = function (e) {\r\n        document.onmousemove = null;\r\n        document.onmouseup = null;\r\n      };\r\n    }\r\n    dialogHeaderEl.onmousedown = moveDown;\r\n    //双击头部效果\r\n    dialogHeaderEl.ondblclick = (e) => {\r\n      if (isFullScreen == false) {\r\n        nowHight = dragDom.clientHeight;\r\n        nowWidth = dragDom.clientWidth;\r\n        nowMarginTop = dragDom.style.marginTop;\r\n        dragDom.style.left = 0;\r\n        dragDom.style.top = 0;\r\n        dragDom.style.height = \"100VH\";\r\n        dragDom.style.width = \"100VW\";\r\n        dragDom.style.marginTop = 0;\r\n        isFullScreen = true;\r\n        dialogHeaderEl.style.cursor = 'initial';\r\n        dialogHeaderEl.onmousedown = null;\r\n      } else {\r\n        dragDom.style.height = \"auto\";\r\n        dragDom.style.width = nowWidth + 'px';\r\n        dragDom.style.marginTop = nowMarginTop;\r\n        isFullScreen = false;\r\n        dialogHeaderEl.style.cursor = 'move';\r\n        dialogHeaderEl.onmousedown = moveDown;\r\n      }\r\n    }\r\n    \r\n\r\n    //拉伸\r\n    let resizeEl=document.createElement(\"div\");\r\n    dragDom.appendChild(resizeEl); \r\n    //在弹窗右下角加上一个10-10px的控制块\r\n    resizeEl.style.cursor = 'se-resize';\r\n    resizeEl.style.position = 'absolute';\r\n    resizeEl.style.height = '10px';\r\n    resizeEl.style.width = '10px';\r\n    resizeEl.style.right = '0px';\r\n    resizeEl.style.bottom = '0px';\r\n    //鼠标拉伸弹窗\r\n    resizeEl.onmousedown = (e) => {\r\n\r\n      // 记录初始x位置\r\n      const clientX = e.clientX;\r\n      // 鼠标按下，计算当前元素距离可视区的距离\r\n      const disX = e.clientX - resizeEl.offsetLeft;\r\n      const disY = e.clientY - resizeEl.offsetTop;\r\n\r\n      document.onmousemove = function (e) {\r\n        e.preventDefault(); // 移动时禁用默认事件\r\n\r\n        // 通过事件委托，计算移动的距离 \r\n        const x = e.clientX - disX + (e.clientX - clientX);//这里 由于elementUI的dialog控制居中的，所以水平拉伸效果是双倍\r\n        const y = e.clientY - disY;\r\n        //比较是否小于最小宽高\r\n        dragDom.style.width = x > minWidth ? `${x}px` : minWidth + 'px';\r\n        dragDom.style.height = y > minHeight ? `${y}px` : minHeight + 'px';\r\n      };\r\n      //拉伸结束\r\n      document.onmouseup = function (e) {\r\n        document.onmousemove = null;\r\n        document.onmouseup = null;\r\n      };\r\n    }\r\n  }\r\n})\r\n/**\r\n *  注意：如果是el-dialog弹出的表单el-form，最好不要把提交按钮当做el-form-item（elementUI文档是这么用的），放在el-dialog里。\r\n *  不然按钮会同el-dialog中标签一样被overflow；\r\n*/\r\n"]}]}